// <auto-generated />
using System;
using Bloggie.web.Data; // Importing the namespace for the application's data context
using Microsoft.EntityFrameworkCore; // Importing the namespace for Entity Framework Core
using Microsoft.EntityFrameworkCore.Infrastructure; // Importing the namespace for EF Core infrastructure components
using Microsoft.EntityFrameworkCore.Metadata; // Importing the namespace for EF Core metadata components
using Microsoft.EntityFrameworkCore.Storage.ValueConversion; // Importing the namespace for value conversion components

#nullable disable

namespace Bloggie.web.Migrations
{
    // This attribute indicates that this class is part of the Entity Framework Core migration process
    [DbContext(typeof(BloggieDbContext))]
    partial class BloggieDbContextModelSnapshot : ModelSnapshot
    {
        // This method builds the model for the database schema, which EF Core uses to understand how the database should look.
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618 // Disabling warnings for obsolete APIs, which might be used in this auto-generated file

            // Adding annotations to the model, such as the EF Core version and maximum identifier length for the SQL Server provider
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            // Configuring the model to use SQL Server identity columns for auto-generated keys
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // Defining the join table "BlogPostTag" to establish a many-to-many relationship between "BlogPosts" and "Tags"
            modelBuilder.Entity("BlogPostTag", b =>
            {
                // Defining the foreign key for the "Tags" side of the relationship
                b.Property<Guid>("TagsId")
                    .HasColumnType("uniqueidentifier");

                // Defining the foreign key for the "BlogPosts" side of the relationship
                b.Property<Guid>("blogPostsId")
                    .HasColumnType("uniqueidentifier");

                // Setting the composite primary key for the "BlogPostTag" table using both foreign keys
                b.HasKey("TagsId", "blogPostsId");

                // Creating an index on the "blogPostsId" column to optimize lookups in the join table
                b.HasIndex("blogPostsId");

                // Specifying the name of the join table in the database
                b.ToTable("BlogPostTag");
            });

            // Defining the "BlogPost" entity and its corresponding table in the database
            modelBuilder.Entity("Bloggie.web.Models.Domain.BlogPost", b =>
            {
                // Defining the primary key of the "BlogPosts" table with auto-generated GUIDs
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                // Defining a required column for the author's name
                b.Property<string>("Author")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a required column for the content of the blog post
                b.Property<string>("Content")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a required column for the featured image URL
                b.Property<string>("FeaturedImageUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a required column for the heading of the blog post
                b.Property<string>("Heading")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a required column for the page title of the blog post
                b.Property<string>("PageTitle")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a column for the published date of the blog post
                b.Property<DateTime>("PublishedDate")
                    .HasColumnType("datetime2");

                // Defining a required column for the short description of the blog post
                b.Property<string>("ShortDescription")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a required column for the URL handle (slug) of the blog post
                b.Property<string>("UrlHandle")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a column to indicate whether the blog post is visible
                b.Property<bool>("Visible")
                    .HasColumnType("bit");

                // Setting the primary key for the "BlogPosts" table
                b.HasKey("Id");

                // Specifying the name of the table in the database
                b.ToTable("BlogPosts");
            });

            // Defining the "Tag" entity and its corresponding table in the database
            modelBuilder.Entity("Bloggie.web.Models.Domain.Tag", b =>
            {
                // Defining the primary key of the "Tags" table with auto-generated GUIDs
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                // Defining a required column for the display name of the tag
                b.Property<string>("DisplayName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Defining a required column for the name of the tag
                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Setting the primary key for the "Tags" table
                b.HasKey("Id");

                // Specifying the name of the table in the database
                b.ToTable("Tags");
            });

            // Configuring the many-to-many relationship between "BlogPosts" and "Tags" using the "BlogPostTag" join table
            modelBuilder.Entity("BlogPostTag", b =>
            {
                // Defining the relationship between "BlogPostTag" and "Tag" entities with cascading delete
                b.HasOne("Bloggie.web.Models.Domain.Tag", null)
                    .WithMany()
                    .HasForeignKey("TagsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                // Defining the relationship between "BlogPostTag" and "BlogPost" entities with cascading delete
                b.HasOne("Bloggie.web.Models.Domain.BlogPost", null)
                    .WithMany()
                    .HasForeignKey("blogPostsId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618 // Re-enabling warnings for obsolete APIs
        }
    }
}
